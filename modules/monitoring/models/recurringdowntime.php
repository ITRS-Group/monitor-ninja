<?php


/**
 * Autogenerated class RecurringDowntime_Model
 *
 * @todo: documentation
 */
class RecurringDowntime_Model extends BaseRecurringDowntime_Model {
	public function get_weekdays()
	{
		$weekdays = parent::get_weekdays();
		if (is_string($weekdays))
			$weekdays = unserialize($weekdays);
		if (!$weekdays)
			$weekdays = array();
		return $weekdays;
	}

	public function get_months()
	{
		$months = parent::get_months();
		if (is_string($months))
			$months = unserialize($months);
		if (!$months)
			$months = array();
		return $months;
	}

    /**
     * Get the start time ,end time or duration, but format it the way times are usually
     *
     */
    public function get_time_string($time, $duration){
         if($duration){
             $data['day']=(int)floor($time/(3600*24));
             $data['hours']=(int)floor($time%(3600*24) / 3600);
             $data['minutes']=(int)floor(($time%3600)/60);
             $data['seconds']=(int)($time%60);
         }else{
             $data['hours']=(int)floor($time / 3600);
             $data['minutes']=(int)floor(($time%3600)/60);
             $data['seconds']=(int)($time%60);
         }
            return $data;
    }


    /**
	 * Get the start time, but format it the way times are usually
	 * formatted: hh:mm:ss
	 *
	 * @ninja orm depend[] start_time
	 */
	public function get_start_time_string()
	{
		$start_time = $this->get_start_time();
        $data=$this->get_time_string($start_time,false);
        return sprintf("%02d:%02d:%02d",$data['hours'],$data['minutes'],$data['seconds']);

    }

	/**
	 * Get the end time, but format it the way times are usually
	 * formatted: hh:mm:ss
	 *
	 * @ninja orm depend[] end_time
	 */
	public function get_end_time_string()
	{
		$end_time = $this->get_end_time();
        $data=$this->get_time_string($end_time,false);
        return sprintf("%02d:%02d:%02d",$data['hours'],$data['minutes'],$data['seconds']);

	}

	/**
	 * Get the duration, but format it the way times are usually
	 * formatted: hh:mm:ss, or an empty string if the downtime is 'fixed'.
	 *
	 * @ninja orm depend[] duration
	 * @ninja orm depend[] fixed
	 */
	public function get_duration_string()
	{
		if($this->get_fixed()) {
			return "";
		}
		$duration = $this->get_duration();
        $data=$this->get_time_string($duration,true);
        return sprintf("%dd %dh %dm %ds",$data['day'],$data['hours'],$data['minutes'],$data['seconds']);
	}

	/**
	 * Get all objects in this schedule as a list
	 *
	 * @ninja orm depend[] id
	 */
	public function get_objects()
	{
		$ret = array();
		$id = $this->get_id();
		if ($id) {
			$db = Database::instance();
			$res = $db->query('SELECT object_name from recurring_downtime_objects WHERE recurring_downtime_id = '.$id);
			foreach ($res->result(false) as $row) {
				$ret[] = $row['object_name'];
			}
		}
		return $ret;
	}
}
