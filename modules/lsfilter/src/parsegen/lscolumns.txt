=LSColumns

_whitespace /^(\s+)/

string      /^("(?:[^"\\]|\\.)*")/
float       /^([0-9]+\.[0-9]*)/
integer     /^([0-9]+)/

then        /^(then)(?:[^a-z0-9_][\s\S]*|)$/i
else        /^(else)(?:[^a-z0-9_][\s\S]*|)$/i


all         /^(all)(?:[^a-z0-9_][\s\S]*|)$/i
default     /^(default)(?:[^a-z0-9_][\s\S]*|)$/i
for         /^(for)(?:[^a-z0-9_][\s\S]*|)$/i
in          /^(in)(?:[^a-z0-9_][\s\S]*|)$/i
if          /^(if)(?:[^a-z0-9_][\s\S]*|)$/i

name        /^([a-z0-9_]+)/i

op_sub      /^(-)/
op_add      /^(\+)/
op_mult     /^(\*)/
op_div      /^(\/)/

comma       /^(,)/
dot         /^(\.)/
eq          /^(=)/
par_l       /^(\()/
par_r       /^(\))/
sq_l        /^(\[)/
sq_r        /^(\])/

-- just so everything can be lexed, and therefore don't break error recovery
char        /^(.)/

entry: definition = column_list end

column_list_single: column_list = column
column_list_multi:  column_list = column_list _comma column

-- Handle error in column list... The error handler should dig out
-- column_list-tokens from error string
column_list_error:  column_list = error

column_all:         column = _all
column_default:     column = _default
column_named:       column = name
column_disable:     column = _op_sub name
column_disable_str: column = _op_sub string
column_custom:      column = custom_name _eq custom_content

_custom_name_name:  custom_name = name
_custom_name_str:   custom_name = string

-- Wrap custom_content so we can track errors in the sub-expression. In that
-- case, the title of the column can be valid, and keep the expression isolated
-- for errors
_custom_content_expr: custom_content = expr
custom_content_error: custom_content = error

expr_eq:            expr     = expr1 _eq expr1

_expr_0_1:          expr     = expr1

expr_add:           expr1    = expr1 _op_add expr2
expr_sub:           expr1    = expr1 _op_sub expr2

_expr_1_2:          expr1    = expr2

expr_mult:          expr2    = expr2 _op_mult expr3
expr_div:           expr2    = expr2 _op_div expr3

_expr_2_3:          expr2    = expr3

expr_neg:           expr3    = _op_sub expr4
_expr_3_4:          expr3    = expr4

expr_var:           expr4    = var
expr_string:        expr4    = string
expr_int:           expr4    = integer
expr_float:         expr4    = float

_expr_par:          expr4    = _par_l expr _par_r
expr_list_comp:     expr4    = _sq_l expr _for name _in expr _sq_r
expr_list_comp_if:  expr4    = _sq_l expr _for name _in expr _if expr _sq_r

expr_func:          expr4    = name _par_l expr_list _par_r

expr_if:            expr4    = _if expr _then expr4 _else expr4

expr_list:          expr_list = expr _comma expr_list
expr_list_end:      expr_list = expr

var_var:            var      = name
var_index:          var      = var _sq_l integer _sq_r
var_attr:           var      = var _dot name
